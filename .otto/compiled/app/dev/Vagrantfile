# Generated by Otto, do not edit!
#
# This is the Vagrantfile generated by Otto for the development of
# this application/service. It should not be hand-edited. To modify the
# Vagrantfile, use the Appfile.

Vagrant.configure("2") do |config|
  
  if ENV["OTTO_VAGRANT_LAYER_PATH"]
    config.vm.clone = ENV["OTTO_VAGRANT_LAYER_PATH"]
  else
    config.vm.box = "hashicorp/precise64"
    config.vm.box_check_update = false
    config.vm.provider :parallels do |p, o|
      o.vm.box = "parallels/ubuntu-12.04"
    end
  end
  

  # Host only network
  config.vm.network "private_network", ip: "100.75.247.103"

  
  # Setup a synced folder from our working directory to /vagrant
  config.vm.synced_folder '/Users/thiago/Projects/Ruby/rails-otto', "/vagrant",
    owner: "vagrant", group: "vagrant"
  

  # Enable SSH agent forwarding so getting private dependencies works
  config.ssh.forward_agent = true

  # Foundation configuration (if any)
  
  dir = "/otto/foundation-1"
  config.vm.synced_folder '/Users/thiago/Projects/Ruby/rails-otto/.otto/compiled/app/foundation-consul/app-dev', dir
  config.vm.provision "shell", inline: "cd #{dir} && bash #{dir}/main.sh"
  

  # ScriptPacks
  dir = "/otto/scriptpacks"
  config.vm.provision "shell", inline: "sudo rm -rf #{dir}; sudo mkdir -p #{dir}; sudo chmod 0777 #{dir}"
  
  config.vm.provision "file", source: "/Users/thiago/Projects/Ruby/rails-otto/.otto/compiled/app/scriptpacks/STDLIB.tar.gz", destination: "#{dir}/STDLIB.tar.gz"
  config.vm.provision "shell", inline: "cd #{dir}; sudo mkdir STDLIB; sudo tar xzf STDLIB.tar.gz -C STDLIB"
  
  config.vm.provision "file", source: "/Users/thiago/Projects/Ruby/rails-otto/.otto/compiled/app/scriptpacks/RUBY.tar.gz", destination: "#{dir}/RUBY.tar.gz"
  config.vm.provision "shell", inline: "cd #{dir}; sudo mkdir RUBY; sudo tar xzf RUBY.tar.gz -C RUBY"
  

  # Load all our fragments here for any dependencies.
  
  $preshell = <<SCRIPT
if command -v apt-get >/dev/null 2>&1; then
    export DEBIAN_FRONTEND=noninteractive
    sudo apt-get update >/dev/null 2>&1
    sudo apt-get install -y apt-transport-https >/dev/null 2>&1
fi
SCRIPT

config.vm.provision "shell", inline: $preshell
config.vm.provision "docker" do |d|
  d.run "postgresql", args: "-p 5432:5432", image: "postgres:9.5"
end

# Sync our own dep folder in there
config.vm.synced_folder '/Users/thiago/Projects/Ruby/rails-otto/.otto/appfile/deps/f9c5cbbc8a591d282aa723ad4f1e324a', "/otto-deps/postgresql-606fbb11-c0c1-a64e-f412-701e345833e6"

# Foundation configuration for dev dep

dir = "/otto/foundation-postgresql-1"
config.vm.synced_folder '/Users/thiago/Projects/Ruby/rails-otto/.otto/compiled/dep-606fbb11-c0c1-a64e-f412-701e345833e6/foundation-consul/app-dev-dep', dir
config.vm.provision "shell", inline: "cd #{dir} && bash #{dir}/main.sh"



  

  # Use linked clones if possible
  config.vm.provider "virtualbox" do |p|
    p.linked_clone = true
  end

  if Vagrant.has_plugin?("vagrant-parallels", ">= 1.6.0")
    config.vm.provider "parallels" do |p|
      p.linked_clone = true
    end
  end

  # This is to work around some bugs right now
  ["vmware_fusion", "vmware_workstation"].each do |name|
    config.vm.provider(name) do |p|
      p.enable_vmrun_ip_lookup = false
    end
  end

  
  config.vm.provision "shell", inline: $script_app, privileged: false

end




$script_app = <<SCRIPT
. /otto/scriptpacks/STDLIB/main.sh
. /otto/scriptpacks/RUBY/main.sh
otto_init

# Make it so that `vagrant ssh` goes directly to the correct dir
vagrant_default_cd "vagrant" "/vagrant"

# Go to our working directory and install gems
cd /vagrant
ruby_gemfile_apt
otto_output "Bundling gem dependencies..."
bundle



SCRIPT

